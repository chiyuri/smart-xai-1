###Python - This code extracts a list of occurences in 1 day (meaning satellites duration of visual over several countries, ground stations and whether or not the satelite is within shade


from collections import namedtuple
from operator import itemgetter
import itertools
import numpy as np


import math
import time
from time import mktime
from datetime import datetime
from datetime import time

satellite_coordinates = namedtuple("satellite_coordinates", ['index', 'day', 'month' , 'year', 'time', 'latitude',
                                                             'longitude'])
eclipse_summary = namedtuple("eclipse_summary", ['index', 'day', 'month' , 'year', 'start_time', 'stop_time',
                                                 'duration'])
country_vis = namedtuple("country_vis", ['index','Country', 'day', 'month' , 'year', 'start_time', 'stop_time',
                                         'duration'])
station_access = namedtuple("station_access", ['index', 'day', 'month' , 'year', 'start_time', 'stop_time',
                                               'duration'])


# load position of satellite
path_coord = 'C:/Users/User/Documents/PhD/ESA/Satellite data/Sentinel 2/Sentinel2A/Longitude_Latitude_Altitude/SENTINEL-2A_40697_LLA_Position1.txt'

f_coord = open(path_coord, "r")
line_count_coord = 0
for line in f_coord:
    if line != "\n":
        line_count_coord += 1
f_coord.close()

f_coord = open(path_coord, "r")
# print(line_count)
node_count_coord = line_count_coord
content_coord = f_coord.read()
lines_coord = content_coord.split('\n')


##########   Eclipse times
path_Eclipse = 'C:/Users/User/Documents/PhD/ESA/Satellite data/Sentinel 2/Sentinel2A/SENTINEL-2A_40697_Eclipse_Summary.txt'

f_Eclipse = open(path_Eclipse, "r")

line_count_Eclipse = 0
for line in f_Eclipse:
    if line != "\n":
        line_count_Eclipse += 1
f_Eclipse.close()

f_Eclipse = open(path_Eclipse, "r")
# print(line_count)
node_count_eclipse = line_count_Eclipse
content_eclipse = f_Eclipse.read()
lines_eclipse = content_eclipse.split('\n')



# Visual of countries
path_country = 'C:/Users/User/Documents/PhD/ESA/Satellite data/Sentinel 2/Sentinel2A/Land Coverage/all countries2.txt'
f_country = open(path_country, "r")

line_count_country = 0
for line in f_country:
    if line != "\n":
        line_count_country += 1
f_country.close()

f_country = open(path_country, "r")
# print(line_count)
node_count_country = line_count_country
content_country = f_country.read()
lines_country = content_country.split('\n')



# Xband to ground stations
path_station = 'C:/Users/User/Documents/PhD/ESA/Satellite data/Sentinel 2/Sentinel2A/X-band Visibility/Facility-EUMETSAT_Maspalomas-To-Satellite-Satellite-Sensor-XBand_Access.txt'
f_station = open(path_station, "r")
content_station = f_station.read()
lines_station = content_station.split('\n')




def sat_coordinates(day, month, year):
    satellite_coord =[]
    satellite_coord_summary =[]
    #for i in range (6,node_count+1):
    for i in range(6, 8 + 1):

        line_details = lines_coord[i].split()
        satellite_coord.append(satellite_coordinates(i-6,int(line_details[0]),str(line_details[1]),int(line_details[2]),
                                                     str(line_details[3]),float(line_details[4]),float(line_details[5])))

    #print(satellite_coord)
    for i in range (0,len(satellite_coord)):
        #print(satellite_coord[i].latitude,satellite_coord[i].longitude)
        if satellite_coord[i].day == day and satellite_coord[i].month == month and satellite_coord[i].year == year:
            satellite_coord_summary.append([satellite_coord[i].time,satellite_coord[i].latitude,satellite_coord[i].longitude,'Satellite Coordinates'])
    return satellite_coord_summary


def eclipse (day,month, year):


    eclipse_sum =[]
    eclipse_final =[]
    #for i in range (6,node_count_eclipse+1):
    for i in range(6, 8 + 1):
        #print(i)
        line_details_eclipse = lines_eclipse[i].split()
        eclipse_sum.append(eclipse_summary(i-6,int(line_details_eclipse[0]),str(line_details_eclipse[1]),int(line_details_eclipse[2]),str(line_details_eclipse[3]),str(line_details_eclipse[15]),float(line_details_eclipse[17])))
        #print(eclipse_sum)
    for i in range(0, len(eclipse_sum)):
        if eclipse_sum[i].day == day and eclipse_sum[i].month == month and eclipse_sum[i].year == year:
            eclipse_final.append([eclipse_sum[i].start_time, eclipse_sum[i].stop_time, eclipse_sum[i].duration, 'Penumbra Shade'])
    return eclipse_final


def country_access(day, month, year, country):

    country_accesses = []
    country_access_summary = []
    for i in range (6,node_count_country+1):
    #for i in range(6, 8 + 1):
        #print(i)
        line_details_country = lines_country[i].split()
        country_accesses.append(country_vis(i - 6, str(line_details_country[0]), int(line_details_country[1]),
                                           str(line_details_country[2]), int(line_details_country[3]),
                                           str(line_details_country[4]), str(line_details_country[8]),
                                          float(line_details_country[9])))
        #print(country_access)

    for i in range (0,len(country_accesses)):
        if country == 'All'or country == '':
            if country_accesses[i].day == day and country_accesses[i].month == month and country_accesses[
                i].year == year:
                country_access_summary.append(
                    [country_accesses[i].start_time, country_accesses[i].stop_time, country_accesses[i].duration,
                     country_accesses[i].Country])
        else:
            if country_accesses[i].day == day and country_accesses[i].month == month and country_accesses[i].year == year and country_accesses[i].Country == country:
                country_access_summary.append([country_accesses[i].start_time,country_accesses[i].stop_time,country_accesses[i].duration,country_accesses[i].Country])
    return country_access_summary



def Xband_stations (day,month,year):

    station_accesses = []
    station_accesses1 = []
    station_accesses2 = []
    station_accesses3 = []
    stations_summary = []
    Xband = 'Eumetsat'

    #for a in range (0,4):
    for a in range(0, 4):
        # while Xband != '':
        #print(a)
        if Xband == 'Eumetsat':

            for i in range(8, 857 + 1):
                # for i in range(8, 10 + 1):
                # print(i)
                line_details_station = lines_station[i].split()
                station_accesses.append(
                    station_access(i - 8, int(line_details_station[1]), str(line_details_station[2]),
                                   int(line_details_station[3]), str(line_details_station[4]),
                                   str(line_details_station[8]), float(line_details_station[9])))
            # print(station_accesses)
            for i in range(0, len(station_accesses)):
                if station_accesses[i].day == day and station_accesses[i].month == month and station_accesses[
                    i].year == year:
                    stations_summary.append([station_accesses[i].start_time, station_accesses[i].stop_time,
                                             station_accesses[i].duration,Xband])

            Xband = 'Matera'
            a += 1
            #return stations_summary

        else:
            if Xband == 'Matera':
                i = 874
                for i in range(876, 1917 + 1):
                    # for i in range(876, 879 + 1):
                    # print(i)
                    line_details_station = lines_station[i].split()
                    station_accesses1.append(
                        station_access(i - 876, int(line_details_station[1]), str(line_details_station[2]),
                                       int(line_details_station[3]), str(line_details_station[4]),
                                       str(line_details_station[8]), float(line_details_station[9])))
                    # print(station_accesses)
                for i in range(0, len(station_accesses1)):
                    if station_accesses1[i].day == day and station_accesses1[i].month == month and station_accesses1[
                        i].year == year:
                        stations_summary.append(
                            [ station_accesses1[i].start_time, station_accesses1[i].stop_time,
                             station_accesses1[
                                 i].duration,Xband])
                Xband = 'PrudhoeBay'
                a += 1
                #return stations_summary

            else:
                if Xband == 'PrudhoeBay':
                    i = 1928
                    for i in range(1929, 4096 + 1):
                        # for i in range(1929, 1930 + 1):
                        # print(i)
                        line_details_station = lines_station[i].split()
                        station_accesses2.append(
                            station_access(i - 1929, int(line_details_station[1]), str(line_details_station[2]),
                                           int(line_details_station[3]), str(line_details_station[4]),
                                           str(line_details_station[8]), float(line_details_station[9])))
                        # print(station_accesses)
                    for i in range(0, len(station_accesses2)):
                        if station_accesses2[i].day == day and station_accesses2[i].month == month and \
                                station_accesses2[
                                    i].year == year:
                            stations_summary.append(
                                [station_accesses2[i].start_time, station_accesses2[i].stop_time,station_accesses2[
                                     i].duration,Xband])
                    Xband = 'Svalbard'
                    a += 1
                    #return stations_summary

                else:
                    if Xband == 'Svalbard':
                        i = 4107
                        for i in range(4108, 6510 + 1):
                            # for i in range(4108, 4110 + 1):
                            # print(i)
                            line_details_station = lines_station[i].split()
                            station_accesses3.append(
                                station_access(i - 4108, int(line_details_station[1]), str(line_details_station[2]),
                                               int(line_details_station[3]), str(line_details_station[4]),
                                               str(line_details_station[8]), float(line_details_station[9])))
                            # print(station_accesses)
                        for i in range(0, len(station_accesses3)):
                            if station_accesses3[i].day == day and station_accesses3[i].month == month and \
                                    station_accesses3[
                                        i].year == year:
                                stations_summary.append(
                                    [station_accesses3[i].start_time, station_accesses3[i].stop_time,station_accesses3[
                                         i].duration,Xband,])
                        Xband = ''
                        a += 1
                        return stations_summary

                    else:

                        print('Error no data found')

        #######Extract time, lat and long for the satellite during respective days



#if __name__ == '__main__':
def main():

    occurence_list=[]
    import sys

    if len(sys.argv) >= 1:

        day =1
        month = 'Dec'
        year = 2020
        country = 'United_Kingdom_8'
        #print(Xband_stations(day,month,year))
        max_length = max(country_access(day,month,year,country),eclipse(day,month,year),Xband_stations(day,month,year))
        print(len(max_length))
        #for i in (0, len(max_length)):
        occurence_list.append([country_access(day,month,year,country)+Xband_stations(day,month,year)+eclipse(day,month,year)])
        occurence_list = list(itertools.chain.from_iterable(list(itertools.chain.from_iterable(occurence_list))))
        sorted_list = sorted(occurence_list, key=lambda x: x[0])
        #print(occurence_list)
        #print(sorted_list)
        #for i in range (0,len(sorted_list)-1):
            #if sorted_list[i][3] == 'United_Kingdom_8':
                #np.set_printoptions(threshold=np.inf)

                #print(np.array(sorted_list[i]))


        np.set_printoptions(threshold=np.inf)

        print(np.array(sorted_list))


    else:
        print('error')
        print(len(sys.argv))


main()
